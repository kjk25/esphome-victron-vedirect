#pragma once
#include "ve_reg_flavor.h"
// clang-format off

#define REGISTERS_COMMON(MACRO) \
  MACRO(ANY, BITMASK, 0x0090, BLE_MODE, READ_WRITE, uint8_t) \
  MACRO(ANY, UNKNOWN, 0x0100, PRODUCT_ID, READ_ONLY) \
  MACRO(ANY, UNKNOWN, 0x0102, APP_VER, READ_ONLY) \
  MACRO(ANY, STRING, 0x010A, SERIAL_NUMBER, READ_ONLY) \
  MACRO(ANY, STRING, 0x010B, MODEL_NAME, READ_ONLY) \
  MACRO(ANY, BITMASK, 0x0140, CAPABILITIES, READ_ONLY, uint32_t) \
  MACRO(ANY, BITMASK, 0x0150, CAPABILITIES_BLE, READ_ONLY, uint32_t) \
  MACRO(ANY, ENUM, 0x0200, DEVICE_MODE, READ_WRITE) \
  MACRO(ANY, ENUM, 0x0201, DEVICE_STATE, READ_ONLY) \
  MACRO(ANY, BITMASK_S, 0x0205, DEVICE_OFF_REASON, READ_ONLY, uint8_t, DEVICE_OFF_REASON_2) \
  MACRO(ANY, BITMASK, 0x0207, DEVICE_OFF_REASON_2, READ_ONLY, uint32_t) \
  MACRO(INV, NUMERIC, 0x0230, AC_OUT_VOLTAGE_SETPOINT, READ_WRITE, uint16_t, V, S_0_01, S_0_01) \
  MACRO(ANY, BITMASK, 0x031C, WARNING_REASON, READ_ONLY, uint16_t) \
  MACRO(ANY, BITMASK_S, 0x031E, ALARM_REASON, READ_ONLY, uint16_t, WARNING_REASON) \
  MACRO(INV, NUMERIC, 0x0320, ALARM_LOW_VOLTAGE_SET, READ_WRITE, uint16_t, V, S_0_01, S_0_01) \
  MACRO(INV, NUMERIC, 0x0321, ALARM_LOW_VOLTAGE_CLEAR, READ_WRITE, uint16_t, V, S_0_01, S_0_01) \
  MACRO(ANY, BOOLEAN, 0x034E, RELAY_CONTROL, READ_WRITE) \
  MACRO(ANY, ENUM, 0x034F, RELAY_MODE, READ_WRITE) \
  MACRO(BMV, NUMERIC, 0x0FFE, TTG, READ_ONLY, uint16_t, minute, S_1, S_1) \
  MACRO(BMV, NUMERIC, 0x0FFF, SOC, READ_ONLY, uint16_t, SOC_PERCENTAGE, S_0_01, S_0_1) \
  MACRO(INV, NUMERIC, 0x2200, AC_OUT_VOLTAGE, READ_ONLY, int16_t, V, S_0_01, S_0_01) \
  MACRO(INV, NUMERIC, 0x2201, AC_OUT_CURRENT, READ_ONLY, int16_t, A, S_0_1, S_0_1) \
  MACRO(INV, NUMERIC, 0x2205, AC_OUT_APPARENT_POWER, READ_ONLY, int32_t, VA, S_1, S_1) \
  MACRO(INV, NUMERIC, 0x2210, SHUTDOWN_LOW_VOLTAGE_SET, READ_WRITE, uint16_t, V, S_0_01, S_0_01) \
  MACRO(INV, NUMERIC, 0x2211, VOLTAGE_RANGE_MIN, READ_ONLY, uint16_t, V, S_0_01, S_0_01) \
  MACRO(INV, NUMERIC, 0x2212, VOLTAGE_RANGE_MAX, READ_ONLY, uint16_t, V, S_0_01, S_0_01) \
  MACRO(ANY, NUMERIC, 0xED8D, DC_CHANNEL1_VOLTAGE, READ_ONLY, int16_t, V, S_0_01, S_0_001) \
  MACRO(BMV, NUMERIC, 0xED8E, DC_CHANNEL1_POWER, READ_ONLY, int16_t, W, S_1, S_1) \
  MACRO(ANY, NUMERIC, 0xED8F, DC_CHANNEL1_CURRENT, READ_ONLY, int16_t, A, S_0_1, S_0_001) \
  MACRO(MPPT, BOOLEAN, 0xEDA8, LOAD_OUTPUT_STATE, READ_ONLY) \
  MACRO(MPPT, NUMERIC, 0xEDAD, LOAD_CURRENT, READ_ONLY, uint16_t, A, S_0_1, S_0_001) \
  MACRO(MPPT, ENUM, 0xEDB3, MPPT_TRACKER_MODE, READ_ONLY) \
  MACRO(MPPT, NUMERIC, 0xEDB8, PANEL_MAXIMUM_VOLTAGE, READ_ONLY, uint16_t, V, S_0_01, S_0_01) \
  MACRO(MPPT, NUMERIC, 0xEDBB, PANEL_VOLTAGE, READ_ONLY, uint16_t, V, S_0_01, S_0_001) \
  MACRO(MPPT, NUMERIC, 0xEDBC, PANEL_POWER, READ_ONLY, uint32_t, W, S_0_01, S_1) \
  MACRO(MPPT, NUMERIC, 0xEDBD, PANEL_CURRENT, READ_ONLY, uint16_t, A, S_0_1, S_0_1) \
  MACRO(MPPT, NUMERIC, 0xEDD0, MAXIMUM_POWER_YESTERDAY, READ_ONLY, uint16_t, W, S_1, S_1) \
  MACRO(MPPT, NUMERIC, 0xEDD1, YIELD_YESTERDAY, READ_ONLY, uint16_t, kWh, S_0_01, S_0_01) \
  MACRO(MPPT, NUMERIC, 0xEDD2, MAXIMUM_POWER_TODAY, READ_ONLY, uint16_t, W, S_1, S_1) \
  MACRO(MPPT, NUMERIC, 0xEDD3, YIELD_TODAY, READ_ONLY, uint16_t, kWh, S_0_01, S_0_01) \
  MACRO(CHG, NUMERIC, 0xEDD5, CHARGER_VOLTAGE, READ_ONLY, uint16_t, V, S_0_01, S_0_001) \
  MACRO(CHG, NUMERIC, 0xEDD7, CHARGER_CURRENT, READ_ONLY, uint16_t, A, S_0_1, S_0_001) \
  MACRO(CHG, ENUM, 0xEDDA, CHR_ERROR_CODE, READ_ONLY) \
  MACRO(MPPT, NUMERIC, 0xEDDC, USER_YIELD, READ_ONLY, uint32_t, kWh, S_0_01, S_0_01) \
  MACRO(MPPT, NUMERIC, 0xEDDD, SYSTEM_YIELD, READ_ONLY, uint32_t, kWh, S_0_01, S_0_01) \
  MACRO(ANY, NUMERIC, 0xEDEC, BAT_TEMPERATURE, READ_ONLY, uint16_t, CELSIUS, S_0_01, S_1) \
  MACRO(BMV71, NUMERIC, 0xEEB8, DC_MONITOR_MODE, READ_ONLY, int16_t, NONE, S_1, S_1) /*might be R/W and it's a signed ENUM*/ \
  MACRO(BMV, BOOLEAN, 0xEEFC, ALARM_BUZZER, READ_WRITE)

// clang-format on